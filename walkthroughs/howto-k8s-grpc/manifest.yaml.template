---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    appmesh.k8s.aws/sidecarInjectorWebhook: enabled
  name: ${APP_NAMESPACE}
---
apiVersion: appmesh.k8s.aws/v1beta1
kind: Mesh
metadata:
  name: ${MESH_NAME}
---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualNode
metadata:
  name: client
  namespace: ${APP_NAMESPACE}
spec:
  meshName: ${MESH_NAME}
  listeners:
    - portMapping:
        port: 8080
        protocol: http
  backends:
    - virtualService:
        virtualServiceName: color.${APP_NAMESPACE}.svc.cluster.local
    - virtualService:
        virtualServiceName: simple.${APP_NAMESPACE}.svc.cluster.local
  serviceDiscovery:
    cloudMap:
      namespaceName: ${CLOUDMAP_NAMESPACE}
      serviceName: client
---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualNode
metadata:
  name: simple
  namespace: ${APP_NAMESPACE}
spec:
  meshName: ${MESH_NAME}
  listeners:
    - portMapping:
        port: 8180
        protocol: http
  serviceDiscovery:
    cloudMap:
      namespaceName: ${CLOUDMAP_NAMESPACE}
      serviceName: simple
---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualNode
metadata:
  name: server
  namespace: ${APP_NAMESPACE}
spec:
  meshName: ${MESH_NAME}
  listeners:
    - portMapping:
        port: 8080
        protocol: grpc
      healthCheck:
        port: 8080
        protocol: grpc
        path: '/ping'
        healthyThreshold: 2
        unhealthyThreshold: 3
        timeoutMillis: 2000
        intervalMillis: 5000
  serviceDiscovery:
    cloudMap:
      namespaceName: ${CLOUDMAP_NAMESPACE}
      serviceName: color
---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualService
metadata:
  name: simple.${APP_NAMESPACE}.svc.cluster.local
  namespace: ${APP_NAMESPACE}
spec:
  meshName: ${MESH_NAME}
  virtualRouter:
    name: simple-vr
    listeners:
      - portMapping:
          port: 8180
          protocol: http
  routes:
    - name: http-route
      http:
        match:
          prefix: /
        action:
          weightedTargets:
            - virtualNodeName: simple
              weight: 1
---
apiVersion: appmesh.k8s.aws/v1beta1
kind: VirtualService
metadata:
  name: color.${APP_NAMESPACE}.svc.cluster.local
  namespace: ${APP_NAMESPACE}
spec:
  meshName: ${MESH_NAME}
  virtualRouter:
    name: virtual-router
    listeners:
      - portMapping:
          port: 8080
          protocol: grpc
  routes:
    - name: route
      grpc:
        match:
          serviceName: color.ColorService
        action:
          weightedTargets:
            - virtualNodeName: server-${APP_NAMESPACE}
              weight: 1
---
apiVersion: v1
kind: Service
metadata:
  name: client
  namespace: ${APP_NAMESPACE}
  labels:
    app: client
spec:
  ports:
    - port: 8080
      name: http
  selector:
    app: client
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
  namespace: ${APP_NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: client
  template:
    metadata:
      annotations:
        appmesh.k8s.aws/mesh: ${MESH_NAME}
      labels:
        app: client
    spec:
      containers:
        - name: app
          image: ${CLIENT_APP_IMAGE}
          ports:
            - containerPort: 8080
          env:
            - name: "COLOR_HOST"
              value: "color.${APP_NAMESPACE}.svc.cluster.local:8080"
            - name: "SIMPLE_HOST"
              value: "simple.${APP_NAMESPACE}.svc.cluster.local:8180"
            - name: "PORT"
              value: "8080"
---
apiVersion: v1
kind: Service
metadata:
  name: server
  namespace: ${APP_NAMESPACE}
  labels:
    app: color
    version: server
spec:
  ports:
    - port: 8080
      name: http
  selector:
    app: color
    version: server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
  namespace: ${APP_NAMESPACE}
  labels:
    app: color
    version: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: color
      version: server
  template:
    metadata:
      annotations:
        appmesh.k8s.aws/mesh: ${MESH_NAME}
      labels:
        app: color
        version: server
    spec:
      containers:
        - name: app
          image: ${COLOR_APP_IMAGE}
          ports:
            - containerPort: 8080
          env:
            - name: "COLOR"
              value: "no color!"
            - name: "PORT"
              value: "8080"
---
apiVersion: v1
kind: Service
metadata:
  name: color
  namespace: ${APP_NAMESPACE}
  labels:
    app: color
spec:
  ports:
    - port: 8080
      name: http
  selector:
    app: color
---
apiVersion: v1
kind: Service
metadata:
  name: simple
  namespace: ${APP_NAMESPACE}
  labels:
    app: simple
spec:
  ports:
    - port: 8180
      name: http
  selector:
    app: simple
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple
  namespace: ${APP_NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: simple
  template:
    metadata:
      annotations:
        appmesh.k8s.aws/mesh: ${MESH_NAME}
      labels:
        app: simple
    spec:
      containers:
        - name: app
          image: ${SIMPLE_APP_IMAGE}
          ports:
            - containerPort: 8180
          env:
            - name: "PORT"
              value: "8180"
            - name: "APP_NAME"
              value: "simple"
---
